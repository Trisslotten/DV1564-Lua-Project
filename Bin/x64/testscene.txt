



Mesh("bumpycyc")
{
	Lua(<
		-- http://ilkinulas.github.io/development/unity/2016/04/30/cube-mesh-in-unity3d.html
		function createCube(pos, size)
			vertices = {
				{-1,-1,-1},
				{1,-1,-1},
				{1,1,-1},
				{-1,1,-1},
				{-1,1,1},
				{1,1,1},
				{1,-1,1},
				{-1,-1,1}
			}
			for p in vertices do
				for i = 1,3 do 
					p[i] = p[i] * size/2 + pos[i]
				end
			end

			indices = {
				0, 2, 1, //face front
				0, 3, 2,
				2, 3, 4, //face top
				2, 4, 5,
				1, 2, 5, //face right
				1, 5, 6,
				0, 7, 4, //face left
				0, 4, 3,
				5, 4, 7, //face back
				5, 7, 6,
				0, 6, 7, //face bottom
				0, 1, 6
			}
			for f = 1,6 do
				toAdd = {}
				for i = 1,6 do
					index = indices[(f-1) * 6 + i]
					table.insert(toAdd, vertices[index])
				end

			end



			
		end




	>)
}

Texture("checkerboard")
{
	(0,0,0), (1,1,1), (0,0,0), (1,1,1),
	(1,1,1), (0,0,0), (1,1,1), (0,0,0),
	(0,0,0), (1,1,1), (0,0,0), (1,1,1),
	(1,1,1), (0,0,0), (1,1,1), (0,0,0)
}

//	example: {{{1.0,0.5,0.5},{0.5,1.0,0.5}},{{0.5,0.5,1.0},{0.0,0.0,0.0}}}
Texture("checkerboard2")
{
	Lua(<
		-- https://www.shadertoy.com/view/4djSRW

		function hash(x, y)
			r = math.fmod(math.sin(x*13.9593 + y*46.1959) * 48568.5453, 1)
			return math.abs(r)
		end

		

		function hermit(t)
			return t * t * (3 - 2 * t)
		end

		-- https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/smoothstep.xhtml
		function smoothstep(a, b, x)
			t = math.max(math.min((x-a)/(b-a), 0), 1)
			return hermit(t)
		end

		function lerp(a, b, t)
			return a * (1 - t) + b * t;
		end

		function noise(x, y)
			s = 100
			x0 = math.floor(x/s)
			x1 = x0 + 1
			tx = hermit(math.fmod(x/s, 1))

			y0 = math.floor(y/s)
			y1 = y0 + 1
			ty = hermit(math.fmod(y/s, 1))

			h00 = hash(x0, y0)
			h10 = hash(x1, y0)
			h01 = hash(x0, y1)
			h11 = hash(x1, y1)

			i0 = lerp(h00, h10, tx)
			i1 = lerp(h01, h11, tx)

			n = lerp(i0, i1, ty)

			return n
		end


		function noise2(x, y)
			local sum = 0
			local s = 1
			local div = 0
			for i = 1, 5 do
				sum = sum + noise(x * s, y * s) / s
				div = div + 1 / s
				s = s * 2
			end
			return sum / div
		end


		w = 500
		h = 500
		result = {}
		for y = 1, h do
			row = {}
			for x = 1, w do
				c = 1-math.abs(2*noise2(x,y) - 1)
				c2 = 1-math.abs(2*c - 1)
				c = 1-math.abs(2*c2 - 1)
				color = {
					c,
					1-c,
					c2
				}
				table.insert(row, color)
			end
			table.insert(result, row)
		end

		return result
	>)
}

Mesh("square")
{
	(-20,0,-20,0,0), (20,0,-20,1,0), (-20,0,20,0,1),
	(20,0,-20,1,0), (20,0,20,1,1), (-20,0,20,0,1)
}

Scene()
{
	Bind( "checkerboard2", Mesh("bumpycyc") )
	Bind( "checkerboard",
	      Transform( Lua(< local args = {...} return args[1]+10, args[2], args[3], args[4], args[5] >),
	                 Mesh("bumpycyc") ) )
	Bind("checkerboard", Mesh("square") )
}